# Sample configuration for using mod_pagespeed
# Change references to www.sample.com and www.sample.com/path to your host and its mapped path(s).

# Run as root to avoid mod_pagespeed permission problems
# TODO Running as nginx user of its own
user root root;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip  on;

    server {
        listen 80;
        server_name  localhost;

        # Enable pagespeed
        pagespeed on;

        # Needs to exist and be writable by nginx.
        pagespeed FileCachePath /var/ngx_pagespeed_cache;

        # Ensure requests for pagespeed optimized resources go to the pagespeed handler
        # and no extraneous headers get set.
        location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
            add_header "" "";
        }
        location ~ "^/ngx_pagespeed_static/" { }
        location ~ "^/ngx_pagespeed_beacon$" { }
        location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
        location /ngx_pagespeed_global_statistics { allow 127.0.0.1; deny all; }
        location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }

        # The filters we'll use
        pagespeed EnableFilters rewrite_domains,trim_urls,rewrite_css,sprite_images,prioritize_critical_css,lazyload_images,defer_javascript;

        # The target subject
        pagespeed Domain www.sample.com;

        # TODO Get rid of the port (caused by docker config)
        pagespeed MapProxyDomain localhost:59080/path www.sample.com/path;

        # Force caching to get the css into pagespeed cache
        pagespeed ForceCaching on;

        location / {
            proxy_pass        http://www.sample.com/;
        }
    }
}
